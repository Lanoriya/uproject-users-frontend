import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setResult } from '../../../../redux/features/user/userSlice';
import { RootState } from '../../../../redux/store/store';
import { GreenAccountSum } from './GreenAccountSum/GreenAccountSum';

interface GreenAccount {
  link: string;
  state: string;
  price: number;
}

interface ServerResponse {
  message: string;
  total_green_price: number;
  progress: string;
  filtered_results: GreenAccount[];
}

export const UserMath = () => {
  const [linksInput, setLinksInput] = useState<string>('');
  const links = useSelector((state: RootState) => state.user.links);
  const [data, setData] = useState<ServerResponse | null>();
  const dispatch = useDispatch();

  useEffect(() => {
    if (links.length > 0) {
      setLinksInput(links.join('\n'));
    }
  }, [links]);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    try {
      const response = await fetch("http://localhost:8000/process-links", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ links: linksInput.split("\n").map(link => link.trim()) }),
      });

      const reader = response.body?.getReader();
      const decoder = new TextDecoder("utf-8");

      if (reader) {
        let result = "";
        while (true) {
          const { value, done } = await reader.read();
          if (done) break;

          result += decoder.decode(value, { stream: true });

          const chunks = result.split("\n").filter((chunk) => chunk.trim() !== "");
          for (const chunk of chunks) {
            try {
              const parsed: ServerResponse = JSON.parse(chunk);
              setData(parsed);

              // –û–±–Ω–æ–≤–ª—è–µ–º Redux
              dispatch(setResult(parsed));
            } catch {
              // –ù–µ–ø–æ–ª–Ω—ã–π JSON
            }
          }
          result = ""; // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
    }
  };

  const handleCopyLinks = () => {
    if (data && data.filtered_results) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏, –∏—Å–∫–ª—é—á–∞—è "–∑–µ–ª—ë–Ω—ã–µ" (üü¢) –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ (üóëÔ∏è)
      const filteredLinks = data.filtered_results
        .filter(result => result.state !== "üü¢" && result.state !== "üóëÔ∏è")
        .map(result => result.link)
        .join("\n");

      // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      navigator.clipboard.writeText(filteredLinks).then(() => {
        console.log("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ");
      }).catch(err => {
        console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫:", err);
      });
    } else {
      alert("–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.");
    }
  };

  return (
    <>
      <div className="usermath-settings">
        <div className="usermath-function">
          <h2>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</h2>
          <form onSubmit={handleSubmit}>
            <textarea
              value={linksInput}
              className="search-input"
              onChange={(e) => setLinksInput(e.target.value)}
              rows={10}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"
            />
            <br />
            <button className="search-button" type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫–∏</button>
          </form>
        </div>
        <div className="usermath-function">
          <h2>–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∑–µ–ª–µ–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</h2>
          <GreenAccountSum />
        </div>
        <div className="usermath-function">
          <h2>–•–æ–ª–¥ –∏ –Ω–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ</h2>
          <div>
            <textarea
              value={
                data && data.filtered_results
                  ? data.filtered_results
                      .filter(result => result.state !== "üü¢" && result.state !== "üóëÔ∏è")
                      .map(result => result.link)
                      .join("\n")
                  : ""
              }
              className="search-input"
              rows={10}
              placeholder="–°—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
              readOnly
            />
            <br />
            <button className="search-button" type="button" onClick={handleCopyLinks}>
              –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏
            </button>
          </div>
        </div>
      </div>
      <div className="usemath-result">
        <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
        {data && data.filtered_results ? (
          data.filtered_results.map((resultItem, index) => (
            <div className="usemath-result-item" key={index}>
              <a href={resultItem.link} target="_blank" rel="noopener noreferrer">
                {resultItem.link}
              </a>
              {" - "}
              <p>{resultItem.state}</p>
              {" - "}
              <p>{resultItem.price}‚ÇΩ</p>
            </div>
          ))
        ) : (
          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
        )}
      </div>
    </>
  );
};
